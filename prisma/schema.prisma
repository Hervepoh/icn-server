generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Bank {
  id           String        @id @default(uuid()) @db.Char(36)
  name         String        @db.VarChar(255)
  code         String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  Transactions Transaction[]

  @@map("banks")
}

model PaymentMode {
  id           String        @id @default(uuid()) @db.Char(36)
  name         String        @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  Transactions Transaction[]

  @@map("payment_modes")
}

model Status {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  Transactions Transaction[]

  @@map("status")
}

model Reference {
  id        String   @id @default(uuid()) @db.Char(36)
  reference String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("references")
}

model User {
  id                        String                @id @default(uuid()) @db.Char(36)
  name                      String
  email                     String                @unique
  password                  String
  ldap                      Boolean               @default(false)
  unitId                    String?               @db.Char(36)
  segmentId                 String?               @db.Char(36)
  createdAt                 DateTime              @default(now()) @map("created_at")
  updatedAt                 DateTime              @updatedAt @map("updated_at")
  deleted                   Boolean               @default(false)
  deletedAt                 DateTime?
  Audit                     Audit[]
  transactionDetails        TransactionDetail[]
  assignedTransactions      Transaction[]         @relation("TransactionAssignator")
  createdTransactions       Transaction[]         @relation("TransactionCreatedBy")
  modifiedTransactions      Transaction[]         @relation("TransactionModifiedBy")
  transactions              Transaction[]         @relation("TransactionOwner")
  validatedTransactions     Transaction[]         @relation("TransactionValidator")
  temporaryUserTransactions TransactionTempUser[]
  roles                     UserRole[]
  segment                   Segment?              @relation(fields: [segmentId], references: [id])
  unit                      Unit?                 @relation(fields: [unitId], references: [id])

  @@index([segmentId], map: "users_segmentId_fkey")
  @@index([unitId], map: "users_unitId_fkey")
  @@map("users")
}

model Role {
  id             String           @id @default(uuid()) @db.Char(36)
  name           String           @unique
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  RolePermission RolePermission[]
  UserRole       UserRole[]

  @@map("roles")
}

model UserRole {
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@index([roleId], map: "user_roles_roleId_fkey")
  @@map("user_roles")
}

model Permission {
  id             String           @id @default(uuid()) @db.Char(36)
  name           String           @unique
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  RolePermission RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@index([permissionId], map: "role_permissions_permissionId_fkey")
  @@map("role_permissions")
}

model Transaction {
  id                        String                @id @default(uuid()) @db.Char(36)
  reference                 String?               @unique
  name                      String
  amount                    Float
  bankId                    String                @db.Char(36)
  paymentDate               DateTime
  paymentModeId             String                @db.Char(36)
  description               String?               @db.VarChar(255)
  statusId                  Int                   @default(1)
  isReceiptReady            Boolean               @default(false)
  validatorId               String?               @db.Char(36)
  validatedAt               DateTime?
  assignBy                  String?               @db.Char(36)
  assignAt                  DateTime?
  refusal                   Boolean               @default(false)
  reasonForRefusal          String?
  userId                    String?               @db.Char(36)
  segmentId                 String?               @db.Char(36)
  unitId                    String?               @db.Char(36)
  regionId                  String?               @db.Char(36)
  createdBy                 String?
  modifiedBy                String?
  deleted                   Boolean               @default(false)
  deletedBy                 String?
  deletedAt                 DateTime?
  createdAt                 DateTime              @default(now()) @map("created_at")
  updatedAt                 DateTime              @updatedAt @map("updated_at")
  transactionDetails        TransactionDetail[]
  assignator                User?                 @relation("TransactionAssignator", fields: [assignBy], references: [id])
  bank                      Bank                  @relation(fields: [bankId], references: [id])
  creator                   User?                 @relation("TransactionCreatedBy", fields: [createdBy], references: [id])
  modifier                  User?                 @relation("TransactionModifiedBy", fields: [modifiedBy], references: [id])
  paymentMode               PaymentMode           @relation(fields: [paymentModeId], references: [id])
  region                    Region?               @relation(fields: [regionId], references: [id])
  segment                   Segment?              @relation(fields: [segmentId], references: [id])
  status                    Status                @relation(fields: [statusId], references: [id])
  unit                      Unit?                 @relation(fields: [unitId], references: [id])
  user                      User?                 @relation("TransactionOwner", fields: [userId], references: [id])
  validator                 User?                 @relation("TransactionValidator", fields: [validatorId], references: [id])
  userTemporaryTransactions TransactionTempUser[]

  @@index([assignBy], map: "transactions_assignBy_fkey")
  @@index([bankId], map: "transactions_bankId_fkey")
  @@index([createdBy], map: "transactions_createdBy_fkey")
  @@index([modifiedBy], map: "transactions_modifiedBy_fkey")
  @@index([paymentModeId], map: "transactions_paymentModeId_fkey")
  @@index([regionId], map: "transactions_regionId_fkey")
  @@index([segmentId], map: "transactions_segmentId_fkey")
  @@index([statusId], map: "transactions_statusId_fkey")
  @@index([unitId], map: "transactions_unitId_fkey")
  @@index([userId], map: "transactions_userId_fkey")
  @@index([validatorId], map: "transactions_validatorId_fkey")
  @@map("transactions")
}

model TransactionDetail {
  id            String      @id @default(cuid())
  transactionId String
  contract      String
  invoice       String
  name          String
  date          String
  amountUnpaid  Float
  amountTopaid  Float
  selected      Boolean     @default(true)
  deleted       Boolean     @default(false)
  deletedAt     DateTime?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  userId        String      @db.Char(36)
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@index([transactionId], map: "transaction_details_transactionId_fkey")
  @@index([userId], map: "transaction_details_userId_fkey")
  @@map("transaction_details")
}

model TransactionTempUser {
  transactionId String
  userId        String
  transactions  Transaction @relation(fields: [transactionId], references: [id])
  users         User        @relation(fields: [userId], references: [id])

  @@id([transactionId, userId])
  @@index([userId], map: "transactions_temp_users_userId_fkey")
  @@map("transactions_temp_users")
}

model IntegrationDocument {
  id                        Int                  @id @default(autoincrement())
  reference                 String
  transactionId             String
  transactionDetailsId      String
  transaction_id            String
  sub_transaction_type      String
  bill_partner_company_name String
  bill_partner_company_code String
  bill_number               String
  bill_account_number       String
  bill_due_date             String
  paid_amount               String
  paid_date                 String
  paid_by_msisdn            String
  transaction_status        String
  om_bill_payment_status    String
  integration_status        EventIntegrationType
  createdAt                 DateTime             @default(now()) @map("created_at")
  updatedAt                 DateTime             @updatedAt @map("updated_at")

  @@map("integration_documents")
}

model IntegrationDocumentHistory {
  id                  Int                  @id @default(autoincrement())
  IntegrationDocument Int
  reference           String
  integration_status  EventIntegrationType
  createdAt           DateTime             @default(now()) @map("created_at")

  @@map("integration_documents_history")
}

model Audit {
  id        Int        @id @default(autoincrement())
  userId    String?
  ipAddress String?
  action    EventType
  details   String     @db.VarChar(5000)
  endpoint  String
  createdAt DateTime   @default(now()) @map("created_at")
  source    SourceType
  user      User?      @relation(fields: [userId], references: [id])

  @@index([userId], map: "audits_userId_fkey")
  @@map("audits")
}

model Notification {
  id        Int                @id @default(autoincrement())
  userId    String?
  email     String?
  phone     String?
  method    NotificationMethod
  subject   String
  message   String             @db.VarChar(5000)
  template  String?
  status    String             @default("unread")
  sent      Boolean            @default(false)
  sentAt    DateTime?
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  @@map("notifications")
}

model JobLock {
  job_name   String   @id
  is_running Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("job_locks")
}

model CustomerReference {
  id          String    @id @default(uuid()) @db.Char(36)
  region      String    @db.Char(50)
  agency      String    @db.Char(50)
  service_no  String
  client_code String
  status      String
  client      String
  category    String
  supply_ref  String
  meter_no    String
  contact     String?
  userId      String?
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String?
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedBy   String?
  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  @@map("customers_reference")
}

model Segment {
  id          String        @id @default(uuid()) @db.Char(36)
  name        String        @unique
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  Transaction Transaction[]
  User        User[]

  @@map("segments")
}

model Unit {
  id           String        @id @default(uuid()) @db.Char(36)
  name         String        @unique
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  regionId     String        @db.Char(36)
  transactions Transaction[]
  region       Region        @relation(fields: [regionId], references: [id])
  users        User[]

  @@index([regionId], map: "units_regionId_fkey")
  @@map("units")
}

model Region {
  id           String        @id @default(uuid()) @db.Char(36)
  name         String        @unique
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  transactions Transaction[]
  units        Unit[]

  @@map("regions")
}

enum EventIntegrationType {
  WAIT_GENERATION
  GENERATED
  PENDING
  ONGOING
  ONGOING_WITH_ISSUE
  INTEGRATED
  CANCELED
}

enum EventType {
  LOGIN
  LOGOUT
  TRANSACTION
}

enum SourceType {
  USER
  SYSTEM
}

enum NotificationMethod {
  EMAIL
  SMS
  WHATSAPP
  INTERN
  AVAILABLE
}
