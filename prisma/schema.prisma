// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Bank {
  id           String        @id @default(uuid()) @db.Char(36)
  name         String        @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  Transactions Transaction[]

  @@map("banks")
}

model PaymentMode {
  id           String        @id @default(uuid()) @db.Char(36)
  name         String        @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  Transactions Transaction[]

  @@map("payment_modes")
}

model Status {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  Transactions Transaction[]

  @@map("status")
}

model Reference {
  id        String   @id @default(uuid()) @db.Char(36)
  reference String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("references")
}

model User {
  id                    String        @id @default(uuid()) @db.Char(36) // Use CHAR(36) for UUID
  name                  String
  email                 String        @unique
  password              String
  ldap                  Boolean       @default(false)
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")

  transactions          Transaction[] @relation("TransactionInitiator")
  roles                 UserRole[]
  Audit                 Audit[]
  validatedTransactions Transaction[] @relation("TransactionValidator") // Transactions validées par l'utilisateur
  createdTransactions   Transaction[] @relation("TransactionCreatedBy") // Transactions créées par l'utilisateur
  modifiedTransactions  Transaction[] @relation("TransactionModifiedBy") // Transactions modifiées par l'utilisateur

  @@map("users")
}

model Role {
  id             String           @id @default(uuid()) @db.Char(36)
  name           String           @unique
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  RolePermission RolePermission[]
  UserRole       UserRole[]

  @@map("roles")
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId]) // Composite primary key
  @@map("user_roles")
}

model Permission {
  id             String           @id @default(uuid()) @db.Char(36)
  name           String           @unique
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  RolePermission RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId]) // Composite primary key
  @@map("role_permissions")
}

model Transaction {
  id               String    @id @default(uuid()) @db.Char(36)
  reference        String?   @unique
  userId           String    @db.Char(36) // Référence à User
  name             String
  amount           Float
  bankId           String    @db.Char(36) // Référence à Bank
  paymentDate      DateTime
  paymentModeId    String    @db.Char(36) // Référence à PaymentMode
  statusId         Int       @default(1)
  validatorId      String?   @db.Char(36) // Référence à User (Validateur)
  validatedAt      DateTime?
  refusal          Boolean   @default(false)
  reasonForRefusal String?
  createdBy        String?
  modifiedBy       String?
  deleted          Boolean   @default(false)
  deletedBy        String?
  deletedAt        DateTime?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  status            Status              @relation(fields: [statusId], references: [id])
  user              User                @relation("TransactionInitiator", fields: [userId], references: [id])
  bank              Bank                @relation(fields: [bankId], references: [id])
  paymentMode       PaymentMode         @relation(fields: [paymentModeId], references: [id])
  validator         User?               @relation("TransactionValidator", fields: [validatorId], references: [id]) // Validateur
  creator           User?               @relation("TransactionCreatedBy", fields: [createdBy], references: [id]) // Créateur
  modifier          User?               @relation("TransactionModifiedBy", fields: [modifiedBy], references: [id]) // Modificateur])
  TransactionDetail TransactionDetail[]

  @@map("transactions")
}

model TransactionDetail {
  id            String    @id @default(cuid())
  transactionId String
  contract      String
  invoice       String
  name          String
  amountUnpaid  Float
  amountTopaid  Float
  selected      Boolean   @default(true)
  deleted       Boolean   @default(false)
  deletedAt     DateTime?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("transaction_details")
}

enum EventIntegrationType {
  PENDING
  GENERATED
  INTEGRATED
  CANCELED
}

model IntegrationDocument {
  transaction_id            String               @id @default(uuid()) @db.Char(36)
  sub_transaction_type      String
  bill_partner_company_name String
  bill_partner_company_code String
  bill_number               String
  bill_account_number       String
  bill_due_date             String
  paid_amount               String
  paid_date                 String
  paid_by_msisdn            String
  transaction_status        String
  om_bill_payment_status    String
  integration_status        EventIntegrationType @default(PENDING)
  createdAt                 DateTime             @default(now()) @map("created_at")
  updatedAt                 DateTime             @updatedAt @map("updated_at")

  @@map("integration_documents")
}

enum EventType {
  LOGIN
  LOGOUT
  TRANSACTION
}

enum SourceType {
  USER
  SYSTEM
}

model Audit {
  id        Int        @id @default(autoincrement())
  userId    String?
  ipAddress String?
  action    EventType
  details   String     @db.VarChar(5000)
  endpoint  String
  createdAt DateTime   @default(now()) @map("created_at")
  source    SourceType

  user User? @relation(fields: [userId], references: [id])

  @@map("audits")
}

enum NotificationMethod {
  EMAIL
  SMS
  WHATSAPP
  INTERN
  AVAILABLE
}

model Notification {
  id        Int                @id @default(autoincrement())
  userId    String? // Peut être nul si personne n'a pas encore de compte (register,activate)
  email     String? // Peut être nul si vous n'envoyez que WhatsApp ou sms
  phone     String? // Numéro de téléphone pour WhatsApp & sms, peut être nul si vous n'envoyez que par e-mail
  method    NotificationMethod
  subject   String
  message   String
  template  String?
  status    String             @default("unread")
  sent      Boolean            @default(false) // Indique si la notification a été envoyée
  sentAt    DateTime? // Date d'envoi, peut être nul si pas encore envoyé
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  @@map("notifications")
}
